
//--------------------------------------------------------
// Windows 8 MiniB3D Driver
// (C) 2013 Sascha Schmidt
//--------------------------------------------------------

Texture2D shaderTexture[8]: register( t0 );
SamplerState samplerType[8]: register( s0 );


struct CLight
{
	float3 	Position;				
	float 	Range;
	float3 	Dir;
	float 	InnerAngle;
	float3 	Color;
	float 	OuterAngle;
	int 	Type;
	float3  pad;
};

struct CTextureStageStage
{
	float2 scale;
	float2 offset;
	int blend;
	int coords;
	float angle;
};

cbuffer cbPerObject : register( b0 )
{
	bool fog;
	bool vertexcolor;
	bool lighting;
	bool textures;
	
	float shine;
	int textureCount;
	
	float3	EyePosition;
	float2 pad;
	
	float4x4 world;
	float4 color;
	float4 ambientColor;
	
	CTextureStageStage textureStages[8];
};

cbuffer cbPerFrame : register( b1 )
{
	float4x4 projection;		
	float4x4 view;				
	float4x4 eyePosition;		
	float3 fogColor;			
	float fogFar;			
	float fogNear;			
};

cbuffer cbLights : register(b2)
{
	int lightCount;
	int lightDirIni;
	int lightDirNum;
	int lightPointIni;
	int lightPointNum;
	int lightSpotIni;
	int lightSpotNum;
	int pad0;
	CLight lights[8];
};

struct COLOR_PAIR
{
   float3 Color;
   float3 ColorSpec;
};


//-----------------------------------------------------------------------------
// Compute point light
//-----------------------------------------------------------------------------

void DoPointLight(float3 lightDir, float3 E, float3 N, float att, inout float3 shading, inout float3 specular, float3 lightColor)
{
	float3 L = normalize(lightDir);

	float lambertTerm = clamp(dot(N,L),0.f,1.f);
	if(lambertTerm > 0.0) 
	{
		shading+= lambertTerm * att * lightColor;
		specular+= shine * pow(saturate(dot(reflect(-L, N),E)),  80.0f)* att;
	}
}

//-----------------------------------------------------------------------------
// Compute spot light
//-----------------------------------------------------------------------------

void DoSpotLight(float3 lightDir,float3 E, float3 N, float3 dir, float att, float theta, float pi, 
inout float3 shading, inout float3 specular, float3 lightColor)
{
	float3 L = normalize(lightDir);
	
	float lambertTerm = clamp(dot(N,L),0.f,1.f);
	if(lambertTerm > 0.0)
	{
		float angle = acos(dot(-normalize(lightDir.xyz),normalize(dir)));
		float f = smoothstep( pi,theta,angle );
		shading+= lambertTerm * att *f * lightColor;
		specular+=  shine * pow(saturate(dot(reflect(-L, N),E)),  80.0f)* att*f;
	}
}

//-----------------------------------------------------------------------------
// Compute directional light
//-----------------------------------------------------------------------------

void DoDirLight(float3 lightDir,float3 E, float3 N,
				inout float3 shading, inout float3 specular, float3 lightColor)
{
	float3 L = normalize(-lightDir);
	float lambertTerm =  clamp(dot(N,L),0.f,1.f);
	shading+= lambertTerm;
	specular+= 10*shine * pow(saturate(dot(reflect(-L,N),E)),  80.0f);
}


///////////////////////////////////////////////////////////////

struct VertexShaderInput{

	float4 Position 	: POSITION;
	float3 Normal 		: NORMAL;
	float4 color 		: COLOR0;
	float2 tex0 		: TEXCOORD0;
	float2 tex1 		: TEXCOORD1;
};

struct VertexShaderOutput{

	float4 Position 	 : SV_POSITION;
	float3 Normal 		 : NORMAL;
	float4 Color 		 : COLOR0;
	float2 Tex0 		 : TEXCOORD0;
	float2 Tex1 		 : TEXCOORD1;	
	float4 E			 : TEXCOORD2;	
	float3 WorldPosition : TEXCOORD3;
	float4 Light0		 : TEXCOORD4;
	float4 Light1		 : TEXCOORD5;
};

VertexShaderOutput vs_main( VertexShaderInput input )
{
	VertexShaderOutput output = (VertexShaderOutput)0;
	float4 worldPosition = mul(input.Position, world);
	float4 viewPosition = mul(worldPosition, view);
	output.Position=mul( viewPosition, projection);
	
	if( textures )
	{
		output.Tex0 = input.tex0;
		output.Tex1 = input.tex1;
	}
	
	output.Color=input.color;

	if( lighting )
	{
		output.Normal = normalize(mul(input.Normal,(float3x3)world));
		output.E.xyz = normalize(EyePosition - worldPosition.xyz);
		output.WorldPosition = worldPosition.xyz;
		output.Light0.xyz = lights[0].Position - worldPosition.xyz;
		output.Light0.w = 1.0f/(lights[0].Range*length(output.Light0.xyz));	
		output.Light1.xyz = lights[1].Position - worldPosition.xyz;
		output.Light1.w = 1.0f/(lights[1].Range*length(output.Light1.xyz));	
	}


	if(fog)
	{
		output.E.w  = saturate((length(EyePosition-worldPosition.xyz) - fogNear)/(fogFar - fogNear)); 
	}

	return output;
}

///////////////////////////////////////////////////////////////

void BlendFunction(int layer, float2 Tex0, float2 Tex1, inout float4 color, float4 vertColor)
{
	CTextureStageStage stage = textureStages[layer];
	float4 textColor = shaderTexture[layer].Sample(samplerType[layer], stage.coords == 0 ? Tex0 : Tex1);

	if(stage.blend == 1 )
	{
		color.xyz = lerp(color.xyz, textColor.xyz, textColor.w );
		color.w = vertColor.w;	
	}
	else if(stage.blend == 2 ) 
	{
		color *= textColor;
	}
	else if(stage.blend == 3 ) 
	{
		float4 mod = (vertColor * textColor);
		color += float4( mod.xyz, textColor.w*vertColor.w);	
	}
	else if(stage.blend==4) 
	{	
		float4 mod = (vertColor * textColor);
		color += float4( mod.xyz, textColor.w*vertColor.w);
	} 
}


float4 ps_main( VertexShaderOutput input ) : SV_TARGET
{
	float4 finalcolor;
	
	if( vertexcolor )
	{
		finalcolor = input.Color;
	}
	else
	{
		finalcolor=color;
	}

	if( textures )
	{
		int j;
		[unroll(3)]
		for( j = 0; j < textureCount; ++j )
		{
			BlendFunction(j, input.Tex0, input.Tex1, finalcolor, input.Color);
		}
	}
	
	if( lighting )
	{
		float3 shading = ambientColor.xyz;
		float3 specular = 0;

		if( lights[0].Type == 3 )
		{
	  		DoSpotLight( input.Light0.xyz, input.E.xyz ,input.Normal, lights[0].Dir, 	input.Light0.w, 
							lights[0].InnerAngle,lights[0].OuterAngle, shading, specular, lights[0].Color);
		}
		else if( lights[0].Type == 2 )
		{
			DoPointLight(input.Light0.xyz, input.E.xyz ,input.Normal,input.Light0.w,shading, specular, lights[0].Color);
		}
		else if( lights[0].Type == 1 )
		{
	  		DoDirLight(input.Light0.xyz, input.E.xyz ,input.Normal,shading, specular, lights[0].Color);
		}

		if( lightCount > 1 )
		{
			if( lights[1].Type == 3 )
			{
	  			DoSpotLight( input.Light1.xyz, input.E.xyz ,input.Normal, lights[1].Dir, input.Light1.w, 
							 lights[1].InnerAngle,lights[1].OuterAngle, shading, specular, lights[1].Color);
			}
			else if( lights[1].Type == 2 )
			{
				DoPointLight(input.Light1.xyz, input.E.xyz ,input.Normal,input.Light1.w,shading, specular, lights[1].Color);
			}
			else if( lights[1].Type == 1 )
			{
	  			DoDirLight(input.Light1.xyz, input.E.xyz ,input.Normal,shading, specular, lights[1].Color);
			}
		}

		finalcolor.rgb *= saturate(shading);
		finalcolor.rgb += specular.x;
	}
	
	else
	{
		finalcolor.rgb *= float3(1.0f,1.0f,1.0f);
	}

	if( fog )
	{
		finalcolor.rgb  = lerp(finalcolor.rgb ,fogColor, input.E.w);
	}
	return finalcolor;
}

